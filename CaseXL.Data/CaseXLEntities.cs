#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using CaseXL.Data;

namespace CaseXL.Data	
{
	public partial class CaseXLEntities : OpenAccessContext, ICaseXLEntitiesUnitOfWork
	{
		private static string connectionStringName = @"CaseXLConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("CaseXLEntities.rlinq");
		
		public CaseXLEntities()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public CaseXLEntities(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public CaseXLEntities(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public CaseXLEntities(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public CaseXLEntities(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Staff> Staffs 
		{
			get
			{
				return this.GetAll<Staff>();
			}
		}
		
		public IQueryable<Partner> Partners 
		{
			get
			{
				return this.GetAll<Partner>();
			}
		}
		
		public IQueryable<Issue> Issues 
		{
			get
			{
				return this.GetAll<Issue>();
			}
		}
		
		public IQueryable<Firm> Firms 
		{
			get
			{
				return this.GetAll<Firm>();
			}
		}
		
		public IQueryable<Case_Type> Case_Types 
		{
			get
			{
				return this.GetAll<Case_Type>();
			}
		}
		
		public IQueryable<Case> Cases 
		{
			get
			{
				return this.GetAll<Case>();
			}
		}
		
		public IQueryable<Witness> Witnesses 
		{
			get
			{
				return this.GetAll<Witness>();
			}
		}
		
		public IQueryable<Exhibit> Exhibits 
		{
			get
			{
				return this.GetAll<Exhibit>();
			}
		}
		
		public IQueryable<Evaluation> Evaluations 
		{
			get
			{
				return this.GetAll<Evaluation>();
			}
		}
		
		public IQueryable<Issues_Fact> Issues_Facts 
		{
			get
			{
				return this.GetAll<Issues_Fact>();
			}
		}
		
		public IQueryable<Exhibits_Fact> Exhibits_Facts 
		{
			get
			{
				return this.GetAll<Exhibits_Fact>();
			}
		}
		
		public IQueryable<Fact> Facts 
		{
			get
			{
				return this.GetAll<Fact>();
			}
		}
		
		public IQueryable<Question> Questions 
		{
			get
			{
				return this.GetAll<Question>();
			}
		}
		
		public IQueryable<Exhibits_Type> Exhibits_Types 
		{
			get
			{
				return this.GetAll<Exhibits_Type>();
			}
		}
		
		public IQueryable<Issue_Question> Issue_Questions 
		{
			get
			{
				return this.GetAll<Issue_Question>();
			}
		}
		
		public IQueryable<App_User> App_Users 
		{
			get
			{
				return this.GetAll<App_User>();
			}
		}
		
		public IQueryable<RestPwd> RestPwds 
		{
			get
			{
				return this.GetAll<RestPwd>();
			}
		}
		
		public IQueryable<Document> Documents 
		{
			get
			{
				return this.GetAll<Document>();
			}
		}
		
		public IQueryable<Fact_Witness_Question> Fact_Witness_Questions 
		{
			get
			{
				return this.GetAll<Fact_Witness_Question>();
			}
		}
		
		public IQueryable<Witness_Fact> Witness_Facts 
		{
			get
			{
				return this.GetAll<Witness_Fact>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			return backend;
		}
	}
	
	public interface ICaseXLEntitiesUnitOfWork : IUnitOfWork
	{
		IQueryable<Staff> Staffs
		{
			get;
		}
		IQueryable<Partner> Partners
		{
			get;
		}
		IQueryable<Issue> Issues
		{
			get;
		}
		IQueryable<Firm> Firms
		{
			get;
		}
		IQueryable<Case_Type> Case_Types
		{
			get;
		}
		IQueryable<Case> Cases
		{
			get;
		}
		IQueryable<Witness> Witnesses
		{
			get;
		}
		IQueryable<Exhibit> Exhibits
		{
			get;
		}
		IQueryable<Evaluation> Evaluations
		{
			get;
		}
		IQueryable<Issues_Fact> Issues_Facts
		{
			get;
		}
		IQueryable<Exhibits_Fact> Exhibits_Facts
		{
			get;
		}
		IQueryable<Fact> Facts
		{
			get;
		}
		IQueryable<Question> Questions
		{
			get;
		}
		IQueryable<Exhibits_Type> Exhibits_Types
		{
			get;
		}
		IQueryable<Issue_Question> Issue_Questions
		{
			get;
		}
		IQueryable<App_User> App_Users
		{
			get;
		}
		IQueryable<RestPwd> RestPwds
		{
			get;
		}
		IQueryable<Document> Documents
		{
			get;
		}
		IQueryable<Fact_Witness_Question> Fact_Witness_Questions
		{
			get;
		}
		IQueryable<Witness_Fact> Witness_Facts
		{
			get;
		}
	}
}
#pragma warning restore 1591
